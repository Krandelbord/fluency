buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id "com.github.johnrengelman.shadow" version "4.0.3"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: "findbugs"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'org.komamitsu'
    archivesBaseName = 'fluency'
    version = '2.0.0-SNAPSHOT'

    def deployUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ''
    def deployPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ''

    dependencies {
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.2'
        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation 'org.mockito:mockito-core:2.23.4'

        implementation 'org.slf4j:slf4j-api:1.7.25'
        implementation 'org.msgpack:jackson-dataformat-msgpack:0.8.16'
        implementation 'org.komamitsu:phi-accural-failure-detector:0.0.4'
        implementation 'net.jodah:failsafe:1.1.1'
    }

    findbugs {
        effort = 'max'
        excludeFilter = file("${rootProject.projectDir}/findbugs-exclude.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    shadowJar {
        relocate 'com.fasterxml.jackson', 'org.komamitsu.thirdparty.jackson'
        classifier = 'shadow'
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar, shadowJar
    }

    signing {
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                artifact shadowJar
                pom {
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'komamitsu'
                            name = 'Mitsunori Komatsu'
                            email = 'komamitsu@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/komamitsu/fluency.git'
                        developerConnection = 'scm:git:git@github.com:komamitsu/fluency.git'
                        url = 'https://github.com/komamitsu/fluency'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = deployUsername
                    password = deployPassword
                }
            }
        }
    }
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}

