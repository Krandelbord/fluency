buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id "com.github.johnrengelman.shadow" version "4.0.3"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: "findbugs"
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'org.komamitsu'
    archivesBaseName = 'fluency'
    version = '2.0.0-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    def deployUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ''
    def deployPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ''

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testImplementation 'junit:junit:4.12'
        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation 'org.mockito:mockito-core:2.23.4'

        implementation 'org.slf4j:slf4j-api:1.7.25'
        implementation 'org.msgpack:jackson-dataformat-msgpack:0.8.16'
        implementation 'org.komamitsu:phi-accural-failure-detector:0.0.4'
        implementation 'com.treasuredata.client:td-client:0.8.9'
        implementation 'net.jodah:failsafe:1.1.1'
    }

    findbugs {
        effort = 'max'
        excludeFilter = file("${rootProject.projectDir}/findbugs-exclude.xml")
    }

    shadowJar {
        relocate 'com.fasterxml.jackson', 'org.komamitsu.thirdparty.jackson'
        classifier = 'shadow'
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar, shadowJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: deployUsername, password: deployPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: deployUsername, password: deployPassword)
                }

                pom.project {
                    name 'fluency'
                    description "Yet another fluent logger"
                    packaging 'jar'
                    url 'https://github.com/komamitsu/fluency'
                    scm {
                        connection 'scm:git:git://github.com/komamitsu/fluency.git'
                        developerConnection 'scm:git:git@github.com:komamitsu/fluency.git'
                        url 'https://github.com/komamitsu/fluency'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'komamitsu'
                            name 'Mitsunori Komatsu'
                            email 'komamitsu@gmail.com'
                        }
                    }
                }
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }
}
